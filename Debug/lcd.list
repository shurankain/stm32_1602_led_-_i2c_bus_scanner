
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001888  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001a20  08001a20  00011a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001a68  08001a68  00011a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001a70  08001a70  00011a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001a74  08001a74  00011a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b8  2000000c  08001a84  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000c4  08001a84  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011aeb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002448  00000000  00000000  00031b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004ff3  00000000  00000000  00033f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000730  00000000  00000000  00038f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000960  00000000  00000000  00039698  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004f50  00000000  00000000  00039ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002c1f  00000000  00000000  0003ef48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00041b67  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001448  00000000  00000000  00041be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001a08 	.word	0x08001a08

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001a08 	.word	0x08001a08

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
{
 80004ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 f89c 	bl	800063c <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f000 f85e 	bl	80005d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051a:	4620      	mov	r0, r4
 800051c:	601d      	str	r5, [r3, #0]
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000008 	.word	0x20000008
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f82f 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f001 f960 	bl	800181c <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
 800058a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff fff6 	bl	800057c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000590:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000592:	bf1c      	itt	ne
 8000594:	4b05      	ldrne	r3, [pc, #20]	; (80005ac <HAL_Delay+0x24>)
 8000596:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000598:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800059a:	bf18      	it	ne
 800059c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059e:	f7ff ffed 	bl	800057c <HAL_GetTick>
 80005a2:	1b40      	subs	r0, r0, r5
 80005a4:	4284      	cmp	r4, r0
 80005a6:	d8fa      	bhi.n	800059e <HAL_Delay+0x16>
  {
  }
}
 80005a8:	bd38      	pop	{r3, r4, r5, pc}
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b8:	041b      	lsls	r3, r3, #16
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005c0:	0200      	lsls	r0, r0, #8
 80005c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005cc:	60d3      	str	r3, [r2, #12]
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	68dc      	ldr	r4, [r3, #12]
 80005da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	bf28      	it	cs
 80005e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 0501 	mov.w	r5, #1
 80005f0:	fa05 f303 	lsl.w	r3, r5, r3
 80005f4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f8:	bf8c      	ite	hi
 80005fa:	3c03      	subhi	r4, #3
 80005fc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fe:	4019      	ands	r1, r3
 8000600:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000602:	fa05 f404 	lsl.w	r4, r5, r4
 8000606:	3c01      	subs	r4, #1
 8000608:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800060a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	ea42 0201 	orr.w	r2, r2, r1
 8000610:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfaf      	iteee	ge
 8000616:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	f000 000f 	andlt.w	r0, r0, #15
 800061e:	4b06      	ldrlt	r3, [pc, #24]	; (8000638 <HAL_NVIC_SetPriority+0x64>)
 8000620:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	bfa5      	ittet	ge
 8000624:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000628:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000ed14 	.word	0xe000ed14

0800063c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800063c:	3801      	subs	r0, #1
 800063e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000642:	d20a      	bcs.n	800065a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	4a07      	ldr	r2, [pc, #28]	; (8000664 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000648:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	21f0      	movs	r1, #240	; 0xf0
 800064c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000650:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000652:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000654:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800065a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000e010 	.word	0xe000e010
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800066c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800066e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000670:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000810 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000674:	4a64      	ldr	r2, [pc, #400]	; (8000808 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000676:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000678:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800067c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000680:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000684:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000688:	42b7      	cmp	r7, r6
 800068a:	f040 80ad 	bne.w	80007e8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800068e:	684c      	ldr	r4, [r1, #4]
 8000690:	f024 0a10 	bic.w	sl, r4, #16
 8000694:	f1ba 0f02 	cmp.w	sl, #2
 8000698:	d116      	bne.n	80006c8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800069a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800069e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006a6:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006ae:	f04f 0e0f 	mov.w	lr, #15
 80006b2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80006b6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006ba:	690d      	ldr	r5, [r1, #16]
 80006bc:	fa05 f50b 	lsl.w	r5, r5, fp
 80006c0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80006c4:	f8cc 5020 	str.w	r5, [ip, #32]
 80006c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006cc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006ce:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d2:	fa05 f50c 	lsl.w	r5, r5, ip
 80006d6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006d8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006dc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ec:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006f0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80006f2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f6:	d815      	bhi.n	8000724 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80006f8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006fc:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000700:	68cd      	ldr	r5, [r1, #12]
 8000702:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000706:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800070a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800070e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000712:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000716:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800071a:	fa0e fe03 	lsl.w	lr, lr, r3
 800071e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000722:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000724:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000726:	9d00      	ldr	r5, [sp, #0]
 8000728:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800072a:	688f      	ldr	r7, [r1, #8]
 800072c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000730:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000732:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000734:	00e5      	lsls	r5, r4, #3
 8000736:	d557      	bpl.n	80007e8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000738:	f04f 0b00 	mov.w	fp, #0
 800073c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000740:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000744:	4d31      	ldr	r5, [pc, #196]	; (800080c <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800074a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800074e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000752:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000756:	9703      	str	r7, [sp, #12]
 8000758:	9f03      	ldr	r7, [sp, #12]
 800075a:	f023 0703 	bic.w	r7, r3, #3
 800075e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000762:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000766:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800076a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800076e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000772:	f04f 0e0f 	mov.w	lr, #15
 8000776:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800077a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800077c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000780:	d039      	beq.n	80007f6 <HAL_GPIO_Init+0x18e>
 8000782:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000786:	42a8      	cmp	r0, r5
 8000788:	d037      	beq.n	80007fa <HAL_GPIO_Init+0x192>
 800078a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078e:	42a8      	cmp	r0, r5
 8000790:	d035      	beq.n	80007fe <HAL_GPIO_Init+0x196>
 8000792:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000796:	42a8      	cmp	r0, r5
 8000798:	d033      	beq.n	8000802 <HAL_GPIO_Init+0x19a>
 800079a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079e:	42a8      	cmp	r0, r5
 80007a0:	bf14      	ite	ne
 80007a2:	2507      	movne	r5, #7
 80007a4:	2504      	moveq	r5, #4
 80007a6:	fa05 f50c 	lsl.w	r5, r5, ip
 80007aa:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ae:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007b0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007b8:	bf0c      	ite	eq
 80007ba:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007bc:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007be:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007c0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007c6:	bf0c      	ite	eq
 80007c8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ca:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007cc:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ce:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007d4:	bf0c      	ite	eq
 80007d6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007d8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007da:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007dc:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007de:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007e0:	bf54      	ite	pl
 80007e2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007e4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007e6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007e8:	3301      	adds	r3, #1
 80007ea:	2b10      	cmp	r3, #16
 80007ec:	f47f af47 	bne.w	800067e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007f0:	b005      	add	sp, #20
 80007f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f6:	465d      	mov	r5, fp
 80007f8:	e7d5      	b.n	80007a6 <HAL_GPIO_Init+0x13e>
 80007fa:	2501      	movs	r5, #1
 80007fc:	e7d3      	b.n	80007a6 <HAL_GPIO_Init+0x13e>
 80007fe:	2502      	movs	r5, #2
 8000800:	e7d1      	b.n	80007a6 <HAL_GPIO_Init+0x13e>
 8000802:	2503      	movs	r5, #3
 8000804:	e7cf      	b.n	80007a6 <HAL_GPIO_Init+0x13e>
 8000806:	bf00      	nop
 8000808:	40013c00 	.word	0x40013c00
 800080c:	40020000 	.word	0x40020000
 8000810:	40023800 	.word	0x40023800

08000814 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000814:	6802      	ldr	r2, [r0, #0]
 8000816:	6953      	ldr	r3, [r2, #20]
 8000818:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800081c:	d00d      	beq.n	800083a <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800081e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000822:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000824:	2304      	movs	r3, #4
 8000826:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000828:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800082a:	2300      	movs	r3, #0
 800082c:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800082e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000832:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000836:	2001      	movs	r0, #1
 8000838:	4770      	bx	lr
  }
  return HAL_OK;
 800083a:	4618      	mov	r0, r3
}
 800083c:	4770      	bx	lr

0800083e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800083e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000842:	4604      	mov	r4, r0
 8000844:	4617      	mov	r7, r2
 8000846:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000848:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800084c:	b28e      	uxth	r6, r1
 800084e:	6825      	ldr	r5, [r4, #0]
 8000850:	f1b8 0f01 	cmp.w	r8, #1
 8000854:	bf0c      	ite	eq
 8000856:	696b      	ldreq	r3, [r5, #20]
 8000858:	69ab      	ldrne	r3, [r5, #24]
 800085a:	ea36 0303 	bics.w	r3, r6, r3
 800085e:	bf14      	ite	ne
 8000860:	2001      	movne	r0, #1
 8000862:	2000      	moveq	r0, #0
 8000864:	b908      	cbnz	r0, 800086a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800086a:	696b      	ldr	r3, [r5, #20]
 800086c:	055a      	lsls	r2, r3, #21
 800086e:	d512      	bpl.n	8000896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000870:	682b      	ldr	r3, [r5, #0]
 8000872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000876:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000878:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800087c:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800087e:	2304      	movs	r3, #4
 8000880:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000882:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8000884:	2300      	movs	r3, #0
 8000886:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000888:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800088c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000890:	2001      	movs	r0, #1
 8000892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000896:	1c7b      	adds	r3, r7, #1
 8000898:	d0d9      	beq.n	800084e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800089a:	b94f      	cbnz	r7, 80008b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800089c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800089e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80008a0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80008a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80008a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80008aa:	2003      	movs	r0, #3
 80008ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80008b0:	f7ff fe64 	bl	800057c <HAL_GetTick>
 80008b4:	eba0 0009 	sub.w	r0, r0, r9
 80008b8:	4287      	cmp	r7, r0
 80008ba:	d2c8      	bcs.n	800084e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80008bc:	e7ee      	b.n	800089c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080008be <I2C_WaitOnFlagUntilTimeout>:
{
 80008be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008c2:	9e08      	ldr	r6, [sp, #32]
 80008c4:	4604      	mov	r4, r0
 80008c6:	4690      	mov	r8, r2
 80008c8:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80008ca:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80008ce:	b28d      	uxth	r5, r1
 80008d0:	6823      	ldr	r3, [r4, #0]
 80008d2:	f1b9 0f01 	cmp.w	r9, #1
 80008d6:	bf0c      	ite	eq
 80008d8:	695b      	ldreq	r3, [r3, #20]
 80008da:	699b      	ldrne	r3, [r3, #24]
 80008dc:	ea35 0303 	bics.w	r3, r5, r3
 80008e0:	bf0c      	ite	eq
 80008e2:	2301      	moveq	r3, #1
 80008e4:	2300      	movne	r3, #0
 80008e6:	4543      	cmp	r3, r8
 80008e8:	d002      	beq.n	80008f0 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80008ea:	2000      	movs	r0, #0
}
 80008ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80008f0:	1c7b      	adds	r3, r7, #1
 80008f2:	d0ed      	beq.n	80008d0 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80008f4:	b95f      	cbnz	r7, 800090e <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80008f6:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80008f8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80008fa:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80008fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000900:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000904:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000906:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800090a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800090e:	f7ff fe35 	bl	800057c <HAL_GetTick>
 8000912:	1b80      	subs	r0, r0, r6
 8000914:	4287      	cmp	r7, r0
 8000916:	d2db      	bcs.n	80008d0 <I2C_WaitOnFlagUntilTimeout+0x12>
 8000918:	e7ed      	b.n	80008f6 <I2C_WaitOnFlagUntilTimeout+0x38>

0800091a <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800091a:	b570      	push	{r4, r5, r6, lr}
 800091c:	4604      	mov	r4, r0
 800091e:	460d      	mov	r5, r1
 8000920:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000922:	6823      	ldr	r3, [r4, #0]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	061b      	lsls	r3, r3, #24
 8000928:	d501      	bpl.n	800092e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800092a:	2000      	movs	r0, #0
 800092c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800092e:	4620      	mov	r0, r4
 8000930:	f7ff ff70 	bl	8000814 <I2C_IsAcknowledgeFailed>
 8000934:	b9a8      	cbnz	r0, 8000962 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000936:	1c6a      	adds	r2, r5, #1
 8000938:	d0f3      	beq.n	8000922 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800093a:	b965      	cbnz	r5, 8000956 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800093c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800093e:	f043 0320 	orr.w	r3, r3, #32
 8000942:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000944:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000946:	2300      	movs	r3, #0
 8000948:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800094a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800094e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000952:	2003      	movs	r0, #3
 8000954:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000956:	f7ff fe11 	bl	800057c <HAL_GetTick>
 800095a:	1b80      	subs	r0, r0, r6
 800095c:	4285      	cmp	r5, r0
 800095e:	d2e0      	bcs.n	8000922 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000960:	e7ec      	b.n	800093c <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000962:	2001      	movs	r0, #1
}
 8000964:	bd70      	pop	{r4, r5, r6, pc}

08000966 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000966:	b570      	push	{r4, r5, r6, lr}
 8000968:	4604      	mov	r4, r0
 800096a:	460d      	mov	r5, r1
 800096c:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	075b      	lsls	r3, r3, #29
 8000974:	d501      	bpl.n	800097a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000976:	2000      	movs	r0, #0
 8000978:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800097a:	4620      	mov	r0, r4
 800097c:	f7ff ff4a 	bl	8000814 <I2C_IsAcknowledgeFailed>
 8000980:	b9a8      	cbnz	r0, 80009ae <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000982:	1c6a      	adds	r2, r5, #1
 8000984:	d0f3      	beq.n	800096e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000986:	b965      	cbnz	r5, 80009a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000988:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000990:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000992:	2300      	movs	r3, #0
 8000994:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000996:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800099a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800099e:	2003      	movs	r0, #3
 80009a0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80009a2:	f7ff fdeb 	bl	800057c <HAL_GetTick>
 80009a6:	1b80      	subs	r0, r0, r6
 80009a8:	4285      	cmp	r5, r0
 80009aa:	d2e0      	bcs.n	800096e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80009ac:	e7ec      	b.n	8000988 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80009ae:	2001      	movs	r0, #1
}
 80009b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080009b4 <HAL_I2C_Init>:
{
 80009b4:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 80009b6:	4604      	mov	r4, r0
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d062      	beq.n	8000a82 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80009bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80009c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009c4:	b91b      	cbnz	r3, 80009ce <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80009c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80009ca:	f000 fddd 	bl	8001588 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 80009ce:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80009d0:	4e2d      	ldr	r6, [pc, #180]	; (8000a88 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 80009d2:	4d2e      	ldr	r5, [pc, #184]	; (8000a8c <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009d4:	2324      	movs	r3, #36	; 0x24
 80009d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80009da:	6813      	ldr	r3, [r2, #0]
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80009e2:	f000 fc23 	bl	800122c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80009e6:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80009e8:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80009ea:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80009ee:	42b3      	cmp	r3, r6
 80009f0:	bf84      	itt	hi
 80009f2:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80009f6:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80009f8:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80009fa:	bf91      	iteee	ls
 80009fc:	1c69      	addls	r1, r5, #1
 80009fe:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000a02:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000a06:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a08:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a0a:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a0c:	d821      	bhi.n	8000a52 <HAL_I2C_Init+0x9e>
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a14:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	bf98      	it	ls
 8000a1c:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a1e:	6a21      	ldr	r1, [r4, #32]
 8000a20:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a22:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a24:	430b      	orrs	r3, r1
 8000a26:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000a28:	68e1      	ldr	r1, [r4, #12]
 8000a2a:	6923      	ldr	r3, [r4, #16]
 8000a2c:	430b      	orrs	r3, r1
 8000a2e:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000a30:	69a1      	ldr	r1, [r4, #24]
 8000a32:	6963      	ldr	r3, [r4, #20]
 8000a34:	430b      	orrs	r3, r1
 8000a36:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000a38:	6813      	ldr	r3, [r2, #0]
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a40:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000a42:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a44:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000a46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a4a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a4c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a52:	68a1      	ldr	r1, [r4, #8]
 8000a54:	b949      	cbnz	r1, 8000a6a <HAL_I2C_Init+0xb6>
 8000a56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a5e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000a62:	b163      	cbz	r3, 8000a7e <HAL_I2C_Init+0xca>
 8000a64:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000a68:	e7d9      	b.n	8000a1e <HAL_I2C_Init+0x6a>
 8000a6a:	2119      	movs	r1, #25
 8000a6c:	434b      	muls	r3, r1
 8000a6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a72:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000a76:	b113      	cbz	r3, 8000a7e <HAL_I2C_Init+0xca>
 8000a78:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000a7c:	e7cf      	b.n	8000a1e <HAL_I2C_Init+0x6a>
 8000a7e:	2001      	movs	r0, #1
 8000a80:	e7cd      	b.n	8000a1e <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8000a82:	2001      	movs	r0, #1
}
 8000a84:	bd70      	pop	{r4, r5, r6, pc}
 8000a86:	bf00      	nop
 8000a88:	000186a0 	.word	0x000186a0
 8000a8c:	000f4240 	.word	0x000f4240

08000a90 <HAL_I2C_Master_Transmit>:
{
 8000a90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000a94:	4604      	mov	r4, r0
 8000a96:	461f      	mov	r7, r3
 8000a98:	460d      	mov	r5, r1
 8000a9a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8000a9c:	f7ff fd6e 	bl	800057c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000aa0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000aa4:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8000aa6:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000aa8:	d004      	beq.n	8000ab4 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000aaa:	2502      	movs	r5, #2
}
 8000aac:	4628      	mov	r0, r5
 8000aae:	b004      	add	sp, #16
 8000ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ab4:	9000      	str	r0, [sp, #0]
 8000ab6:	2319      	movs	r3, #25
 8000ab8:	2201      	movs	r2, #1
 8000aba:	495d      	ldr	r1, [pc, #372]	; (8000c30 <HAL_I2C_Master_Transmit+0x1a0>)
 8000abc:	4620      	mov	r0, r4
 8000abe:	f7ff fefe 	bl	80008be <I2C_WaitOnFlagUntilTimeout>
 8000ac2:	2800      	cmp	r0, #0
 8000ac4:	d1f1      	bne.n	8000aaa <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000ac6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d0ed      	beq.n	8000aaa <HAL_I2C_Master_Transmit+0x1a>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ad4:	6823      	ldr	r3, [r4, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000ada:	bf5e      	ittt	pl
 8000adc:	681a      	ldrpl	r2, [r3, #0]
 8000ade:	f042 0201 	orrpl.w	r2, r2, #1
 8000ae2:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000aea:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000aec:	2221      	movs	r2, #33	; 0x21
 8000aee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000af2:	2210      	movs	r2, #16
 8000af4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000af8:	2200      	movs	r2, #0
 8000afa:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000afc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000b00:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b02:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000b04:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000b06:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000b08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8000b0a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000b0e:	2a04      	cmp	r2, #4
 8000b10:	d004      	beq.n	8000b1c <HAL_I2C_Master_Transmit+0x8c>
 8000b12:	2a01      	cmp	r2, #1
 8000b14:	d002      	beq.n	8000b1c <HAL_I2C_Master_Transmit+0x8c>
 8000b16:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000b1a:	d104      	bne.n	8000b26 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	e002      	b.n	8000b2c <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000b26:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000b28:	2a12      	cmp	r2, #18
 8000b2a:	d0f7      	beq.n	8000b1c <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b2c:	9600      	str	r6, [sp, #0]
 8000b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b30:	2200      	movs	r2, #0
 8000b32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000b36:	4620      	mov	r0, r4
 8000b38:	f7ff fec1 	bl	80008be <I2C_WaitOnFlagUntilTimeout>
 8000b3c:	bb28      	cbnz	r0, 8000b8a <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b3e:	6923      	ldr	r3, [r4, #16]
 8000b40:	6822      	ldr	r2, [r4, #0]
 8000b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b46:	d112      	bne.n	8000b6e <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b48:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000b4c:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b4e:	4633      	mov	r3, r6
 8000b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000b52:	4938      	ldr	r1, [pc, #224]	; (8000c34 <HAL_I2C_Master_Transmit+0x1a4>)
 8000b54:	4620      	mov	r0, r4
 8000b56:	f7ff fe72 	bl	800083e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b5a:	4605      	mov	r5, r0
 8000b5c:	b9a0      	cbnz	r0, 8000b88 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	9003      	str	r0, [sp, #12]
 8000b62:	695a      	ldr	r2, [r3, #20]
 8000b64:	9203      	str	r2, [sp, #12]
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	9303      	str	r3, [sp, #12]
 8000b6a:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8000b6c:	e050      	b.n	8000c10 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000b6e:	11eb      	asrs	r3, r5, #7
 8000b70:	f003 0306 	and.w	r3, r3, #6
 8000b74:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000b78:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000b7a:	492f      	ldr	r1, [pc, #188]	; (8000c38 <HAL_I2C_Master_Transmit+0x1a8>)
 8000b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000b7e:	4633      	mov	r3, r6
 8000b80:	4620      	mov	r0, r4
 8000b82:	f7ff fe5c 	bl	800083e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b86:	b148      	cbz	r0, 8000b9c <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	f04f 0300 	mov.w	r3, #0
 8000b92:	d107      	bne.n	8000ba4 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8000b94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000b98:	2501      	movs	r5, #1
 8000b9a:	e787      	b.n	8000aac <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	b2ed      	uxtb	r5, r5
 8000ba0:	611d      	str	r5, [r3, #16]
 8000ba2:	e7d4      	b.n	8000b4e <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8000ba4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8000ba8:	2503      	movs	r5, #3
 8000baa:	e77f      	b.n	8000aac <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000bac:	4632      	mov	r2, r6
 8000bae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f7ff feb2 	bl	800091a <I2C_WaitOnTXEFlagUntilTimeout>
 8000bb6:	b140      	cbz	r0, 8000bca <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	d1f4      	bne.n	8000ba8 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000bbe:	6822      	ldr	r2, [r4, #0]
 8000bc0:	6813      	ldr	r3, [r2, #0]
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e7e6      	b.n	8000b98 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000bca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000bcc:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 8000bce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000bd0:	1c4b      	adds	r3, r1, #1
 8000bd2:	6263      	str	r3, [r4, #36]	; 0x24
 8000bd4:	780b      	ldrb	r3, [r1, #0]
 8000bd6:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000bd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000be0:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000be2:	1e53      	subs	r3, r2, #1
 8000be4:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000be6:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000be8:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000bea:	d50a      	bpl.n	8000c02 <HAL_I2C_Master_Transmit+0x172>
 8000bec:	b14b      	cbz	r3, 8000c02 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000bee:	1c8b      	adds	r3, r1, #2
 8000bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8000bf2:	784b      	ldrb	r3, [r1, #1]
 8000bf4:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000bf6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000bfc:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000bfe:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000c00:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c02:	4632      	mov	r2, r6
 8000c04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff fead 	bl	8000966 <I2C_WaitOnBTFFlagUntilTimeout>
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	d1d3      	bne.n	8000bb8 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8000c10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1ca      	bne.n	8000bac <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000c16:	6821      	ldr	r1, [r4, #0]
 8000c18:	680a      	ldr	r2, [r1, #0]
 8000c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c1e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000c20:	2220      	movs	r2, #32
 8000c22:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000c26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000c2e:	e73d      	b.n	8000aac <HAL_I2C_Master_Transmit+0x1c>
 8000c30:	00100002 	.word	0x00100002
 8000c34:	00010002 	.word	0x00010002
 8000c38:	00010008 	.word	0x00010008

08000c3c <HAL_I2C_IsDeviceReady>:
{
 8000c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c40:	4604      	mov	r4, r0
 8000c42:	b085      	sub	sp, #20
 8000c44:	4698      	mov	r8, r3
 8000c46:	4689      	mov	r9, r1
 8000c48:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 8000c4a:	f7ff fc97 	bl	800057c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000c4e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000c52:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8000c54:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000c56:	d003      	beq.n	8000c60 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8000c58:	2002      	movs	r0, #2
}
 8000c5a:	b005      	add	sp, #20
 8000c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c60:	9000      	str	r0, [sp, #0]
 8000c62:	2319      	movs	r3, #25
 8000c64:	2201      	movs	r2, #1
 8000c66:	494a      	ldr	r1, [pc, #296]	; (8000d90 <HAL_I2C_IsDeviceReady+0x154>)
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f7ff fe28 	bl	80008be <I2C_WaitOnFlagUntilTimeout>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d1f2      	bne.n	8000c58 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8000c72:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d0ee      	beq.n	8000c58 <HAL_I2C_IsDeviceReady+0x1c>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000c80:	6823      	ldr	r3, [r4, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c82:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8000d90 <HAL_I2C_IsDeviceReady+0x154>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000c8a:	bf5e      	ittt	pl
 8000c8c:	681a      	ldrpl	r2, [r3, #0]
 8000c8e:	f042 0201 	orrpl.w	r2, r2, #1
 8000c92:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c9a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c9c:	2324      	movs	r3, #36	; 0x24
 8000c9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ca2:	2500      	movs	r5, #0
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <HAL_I2C_IsDeviceReady+0x158>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ca6:	6425      	str	r5, [r4, #64]	; 0x40
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ca8:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000cac:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000cae:	6822      	ldr	r2, [r4, #0]
 8000cb0:	6813      	ldr	r3, [r2, #0]
 8000cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb6:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000cb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000cbc:	9600      	str	r6, [sp, #0]
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f7ff fdfb 	bl	80008be <I2C_WaitOnFlagUntilTimeout>
 8000cc8:	b108      	cbz	r0, 8000cce <HAL_I2C_IsDeviceReady+0x92>
        return HAL_TIMEOUT;
 8000cca:	2003      	movs	r0, #3
 8000ccc:	e7c5      	b.n	8000c5a <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8000cd4:	f7ff fc52 	bl	800057c <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000cdc:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8000cde:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tickstart = HAL_GetTick();
 8000ce2:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000ce4:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000ce8:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8000cec:	b2db      	uxtb	r3, r3
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000cee:	27a0      	movs	r7, #160	; 0xa0
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8000cf0:	b911      	cbnz	r1, 8000cf8 <HAL_I2C_IsDeviceReady+0xbc>
 8000cf2:	b90a      	cbnz	r2, 8000cf8 <HAL_I2C_IsDeviceReady+0xbc>
 8000cf4:	2ba0      	cmp	r3, #160	; 0xa0
 8000cf6:	d120      	bne.n	8000d3a <HAL_I2C_IsDeviceReady+0xfe>
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000cf8:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8000cfa:	2720      	movs	r7, #32
 8000cfc:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000d00:	695a      	ldr	r2, [r3, #20]
 8000d02:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d0c:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000d0e:	d02a      	beq.n	8000d66 <HAL_I2C_IsDeviceReady+0x12a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d10:	2200      	movs	r2, #0
 8000d12:	9203      	str	r2, [sp, #12]
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	9203      	str	r2, [sp, #12]
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	9303      	str	r3, [sp, #12]
 8000d1c:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d1e:	9600      	str	r6, [sp, #0]
 8000d20:	2319      	movs	r3, #25
 8000d22:	2201      	movs	r2, #1
 8000d24:	491a      	ldr	r1, [pc, #104]	; (8000d90 <HAL_I2C_IsDeviceReady+0x154>)
 8000d26:	4620      	mov	r0, r4
 8000d28:	f7ff fdc9 	bl	80008be <I2C_WaitOnFlagUntilTimeout>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d1cc      	bne.n	8000cca <HAL_I2C_IsDeviceReady+0x8e>
        hi2c->State = HAL_I2C_STATE_READY;
 8000d30:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000d34:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8000d38:	e78f      	b.n	8000c5a <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000d3a:	f1b8 0f00 	cmp.w	r8, #0
 8000d3e:	d10c      	bne.n	8000d5a <HAL_I2C_IsDeviceReady+0x11e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000d40:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d48:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8000d4a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d4e:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d52:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	e7ca      	b.n	8000cf0 <HAL_I2C_IsDeviceReady+0xb4>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000d5a:	f7ff fc0f 	bl	800057c <HAL_GetTick>
 8000d5e:	1b80      	subs	r0, r0, r6
 8000d60:	4580      	cmp	r8, r0
 8000d62:	d3ed      	bcc.n	8000d40 <HAL_I2C_IsDeviceReady+0x104>
 8000d64:	e7ee      	b.n	8000d44 <HAL_I2C_IsDeviceReady+0x108>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000d6a:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d6c:	4659      	mov	r1, fp
 8000d6e:	9600      	str	r6, [sp, #0]
 8000d70:	2319      	movs	r3, #25
 8000d72:	2201      	movs	r2, #1
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff fda2 	bl	80008be <I2C_WaitOnFlagUntilTimeout>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d1a5      	bne.n	8000cca <HAL_I2C_IsDeviceReady+0x8e>
 8000d7e:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8000d80:	45aa      	cmp	sl, r5
 8000d82:	d894      	bhi.n	8000cae <HAL_I2C_IsDeviceReady+0x72>
    __HAL_UNLOCK(hi2c);
 8000d84:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000d88:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	e764      	b.n	8000c5a <HAL_I2C_IsDeviceReady+0x1e>
 8000d90:	00100002 	.word	0x00100002
 8000d94:	ffff0000 	.word	0xffff0000

08000d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	b918      	cbnz	r0, 8000da8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000da0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000da2:	b002      	add	sp, #8
 8000da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da8:	6803      	ldr	r3, [r0, #0]
 8000daa:	07dd      	lsls	r5, r3, #31
 8000dac:	d410      	bmi.n	8000dd0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	0798      	lsls	r0, r3, #30
 8000db2:	d458      	bmi.n	8000e66 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	071a      	lsls	r2, r3, #28
 8000db8:	f100 809a 	bmi.w	8000ef0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	075b      	lsls	r3, r3, #29
 8000dc0:	f100 80b8 	bmi.w	8000f34 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dc4:	69a2      	ldr	r2, [r4, #24]
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8119 	bne.w	8000ffe <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e7e8      	b.n	8000da2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dd0:	4ba6      	ldr	r3, [pc, #664]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	f002 020c 	and.w	r2, r2, #12
 8000dd8:	2a04      	cmp	r2, #4
 8000dda:	d007      	beq.n	8000dec <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000de2:	2a08      	cmp	r2, #8
 8000de4:	d10a      	bne.n	8000dfc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	0259      	lsls	r1, r3, #9
 8000dea:	d507      	bpl.n	8000dfc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dec:	4b9f      	ldr	r3, [pc, #636]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	039a      	lsls	r2, r3, #14
 8000df2:	d5dc      	bpl.n	8000dae <HAL_RCC_OscConfig+0x16>
 8000df4:	6863      	ldr	r3, [r4, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1d9      	bne.n	8000dae <HAL_RCC_OscConfig+0x16>
 8000dfa:	e7d1      	b.n	8000da0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfc:	6863      	ldr	r3, [r4, #4]
 8000dfe:	4d9b      	ldr	r5, [pc, #620]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	d111      	bne.n	8000e2a <HAL_RCC_OscConfig+0x92>
 8000e06:	682b      	ldr	r3, [r5, #0]
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fbb5 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e12:	4d96      	ldr	r5, [pc, #600]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000e14:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e16:	682b      	ldr	r3, [r5, #0]
 8000e18:	039b      	lsls	r3, r3, #14
 8000e1a:	d4c8      	bmi.n	8000dae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fbae 	bl	800057c <HAL_GetTick>
 8000e20:	1b80      	subs	r0, r0, r6
 8000e22:	2864      	cmp	r0, #100	; 0x64
 8000e24:	d9f7      	bls.n	8000e16 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000e26:	2003      	movs	r0, #3
 8000e28:	e7bb      	b.n	8000da2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e2e:	d104      	bne.n	8000e3a <HAL_RCC_OscConfig+0xa2>
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e36:	602b      	str	r3, [r5, #0]
 8000e38:	e7e5      	b.n	8000e06 <HAL_RCC_OscConfig+0x6e>
 8000e3a:	682a      	ldr	r2, [r5, #0]
 8000e3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e40:	602a      	str	r2, [r5, #0]
 8000e42:	682a      	ldr	r2, [r5, #0]
 8000e44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e48:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1df      	bne.n	8000e0e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fb95 	bl	800057c <HAL_GetTick>
 8000e52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	039f      	lsls	r7, r3, #14
 8000e58:	d5a9      	bpl.n	8000dae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e5a:	f7ff fb8f 	bl	800057c <HAL_GetTick>
 8000e5e:	1b80      	subs	r0, r0, r6
 8000e60:	2864      	cmp	r0, #100	; 0x64
 8000e62:	d9f7      	bls.n	8000e54 <HAL_RCC_OscConfig+0xbc>
 8000e64:	e7df      	b.n	8000e26 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e66:	4b81      	ldr	r3, [pc, #516]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	f012 0f0c 	tst.w	r2, #12
 8000e6e:	d007      	beq.n	8000e80 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e76:	2a08      	cmp	r2, #8
 8000e78:	d111      	bne.n	8000e9e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	025e      	lsls	r6, r3, #9
 8000e7e:	d40e      	bmi.n	8000e9e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e80:	4b7a      	ldr	r3, [pc, #488]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	0795      	lsls	r5, r2, #30
 8000e86:	d502      	bpl.n	8000e8e <HAL_RCC_OscConfig+0xf6>
 8000e88:	68e2      	ldr	r2, [r4, #12]
 8000e8a:	2a01      	cmp	r2, #1
 8000e8c:	d188      	bne.n	8000da0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	6921      	ldr	r1, [r4, #16]
 8000e92:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e96:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000e9a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9c:	e78a      	b.n	8000db4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e9e:	68e2      	ldr	r2, [r4, #12]
 8000ea0:	4b73      	ldr	r3, [pc, #460]	; (8001070 <HAL_RCC_OscConfig+0x2d8>)
 8000ea2:	b1b2      	cbz	r2, 8000ed2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fb68 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eac:	4d6f      	ldr	r5, [pc, #444]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000eae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	0798      	lsls	r0, r3, #30
 8000eb4:	d507      	bpl.n	8000ec6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb6:	682b      	ldr	r3, [r5, #0]
 8000eb8:	6922      	ldr	r2, [r4, #16]
 8000eba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ebe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ec2:	602b      	str	r3, [r5, #0]
 8000ec4:	e776      	b.n	8000db4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec6:	f7ff fb59 	bl	800057c <HAL_GetTick>
 8000eca:	1b80      	subs	r0, r0, r6
 8000ecc:	2802      	cmp	r0, #2
 8000ece:	d9ef      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x118>
 8000ed0:	e7a9      	b.n	8000e26 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000ed2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fb52 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed8:	4d64      	ldr	r5, [pc, #400]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000eda:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000edc:	682b      	ldr	r3, [r5, #0]
 8000ede:	0799      	lsls	r1, r3, #30
 8000ee0:	f57f af68 	bpl.w	8000db4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee4:	f7ff fb4a 	bl	800057c <HAL_GetTick>
 8000ee8:	1b80      	subs	r0, r0, r6
 8000eea:	2802      	cmp	r0, #2
 8000eec:	d9f6      	bls.n	8000edc <HAL_RCC_OscConfig+0x144>
 8000eee:	e79a      	b.n	8000e26 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ef0:	6962      	ldr	r2, [r4, #20]
 8000ef2:	4b60      	ldr	r3, [pc, #384]	; (8001074 <HAL_RCC_OscConfig+0x2dc>)
 8000ef4:	b17a      	cbz	r2, 8000f16 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000efa:	f7ff fb3f 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efe:	4d5b      	ldr	r5, [pc, #364]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000f00:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f02:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f04:	079f      	lsls	r7, r3, #30
 8000f06:	f53f af59 	bmi.w	8000dbc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fb37 	bl	800057c <HAL_GetTick>
 8000f0e:	1b80      	subs	r0, r0, r6
 8000f10:	2802      	cmp	r0, #2
 8000f12:	d9f6      	bls.n	8000f02 <HAL_RCC_OscConfig+0x16a>
 8000f14:	e787      	b.n	8000e26 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000f16:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f18:	f7ff fb30 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1c:	4d53      	ldr	r5, [pc, #332]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000f1e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f20:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f22:	0798      	lsls	r0, r3, #30
 8000f24:	f57f af4a 	bpl.w	8000dbc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f28:	f7ff fb28 	bl	800057c <HAL_GetTick>
 8000f2c:	1b80      	subs	r0, r0, r6
 8000f2e:	2802      	cmp	r0, #2
 8000f30:	d9f6      	bls.n	8000f20 <HAL_RCC_OscConfig+0x188>
 8000f32:	e778      	b.n	8000e26 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f34:	4b4d      	ldr	r3, [pc, #308]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
 8000f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f38:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000f3c:	d128      	bne.n	8000f90 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	9201      	str	r2, [sp, #4]
 8000f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f52:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f54:	4d48      	ldr	r5, [pc, #288]	; (8001078 <HAL_RCC_OscConfig+0x2e0>)
 8000f56:	682b      	ldr	r3, [r5, #0]
 8000f58:	05d9      	lsls	r1, r3, #23
 8000f5a:	d51b      	bpl.n	8000f94 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5c:	68a3      	ldr	r3, [r4, #8]
 8000f5e:	4d43      	ldr	r5, [pc, #268]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d127      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x21c>
 8000f64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fb06 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f70:	4d3e      	ldr	r5, [pc, #248]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000f72:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f74:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f7a:	079b      	lsls	r3, r3, #30
 8000f7c:	d539      	bpl.n	8000ff2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000f7e:	2e00      	cmp	r6, #0
 8000f80:	f43f af20 	beq.w	8000dc4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f84:	4a39      	ldr	r2, [pc, #228]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
 8000f86:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	e719      	b.n	8000dc4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000f90:	2600      	movs	r6, #0
 8000f92:	e7df      	b.n	8000f54 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f9c:	f7ff faee 	bl	800057c <HAL_GetTick>
 8000fa0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa2:	682b      	ldr	r3, [r5, #0]
 8000fa4:	05da      	lsls	r2, r3, #23
 8000fa6:	d4d9      	bmi.n	8000f5c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa8:	f7ff fae8 	bl	800057c <HAL_GetTick>
 8000fac:	1bc0      	subs	r0, r0, r7
 8000fae:	2802      	cmp	r0, #2
 8000fb0:	d9f7      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x20a>
 8000fb2:	e738      	b.n	8000e26 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d104      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x22a>
 8000fb8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	672b      	str	r3, [r5, #112]	; 0x70
 8000fc0:	e7d0      	b.n	8000f64 <HAL_RCC_OscConfig+0x1cc>
 8000fc2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000fc4:	f022 0201 	bic.w	r2, r2, #1
 8000fc8:	672a      	str	r2, [r5, #112]	; 0x70
 8000fca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000fcc:	f022 0204 	bic.w	r2, r2, #4
 8000fd0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1ca      	bne.n	8000f6c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fad1 	bl	800057c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fda:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fde:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fe2:	0798      	lsls	r0, r3, #30
 8000fe4:	d5cb      	bpl.n	8000f7e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fac9 	bl	800057c <HAL_GetTick>
 8000fea:	1bc0      	subs	r0, r0, r7
 8000fec:	4540      	cmp	r0, r8
 8000fee:	d9f7      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x248>
 8000ff0:	e719      	b.n	8000e26 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fac3 	bl	800057c <HAL_GetTick>
 8000ff6:	1bc0      	subs	r0, r0, r7
 8000ff8:	4540      	cmp	r0, r8
 8000ffa:	d9bd      	bls.n	8000f78 <HAL_RCC_OscConfig+0x1e0>
 8000ffc:	e713      	b.n	8000e26 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ffe:	4d1b      	ldr	r5, [pc, #108]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
 8001000:	68ab      	ldr	r3, [r5, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b08      	cmp	r3, #8
 8001008:	f43f aeca 	beq.w	8000da0 <HAL_RCC_OscConfig+0x8>
 800100c:	4e1b      	ldr	r6, [pc, #108]	; (800107c <HAL_RCC_OscConfig+0x2e4>)
 800100e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001010:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001012:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001014:	d134      	bne.n	8001080 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001016:	f7ff fab1 	bl	800057c <HAL_GetTick>
 800101a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	0199      	lsls	r1, r3, #6
 8001020:	d41e      	bmi.n	8001060 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001022:	6a22      	ldr	r2, [r4, #32]
 8001024:	69e3      	ldr	r3, [r4, #28]
 8001026:	4313      	orrs	r3, r2
 8001028:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800102a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800102e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001030:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001034:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001036:	4c0d      	ldr	r4, [pc, #52]	; (800106c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001038:	0852      	lsrs	r2, r2, #1
 800103a:	3a01      	subs	r2, #1
 800103c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001040:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001042:	2301      	movs	r3, #1
 8001044:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001046:	f7ff fa99 	bl	800057c <HAL_GetTick>
 800104a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	019a      	lsls	r2, r3, #6
 8001050:	f53f aebc 	bmi.w	8000dcc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001054:	f7ff fa92 	bl	800057c <HAL_GetTick>
 8001058:	1b40      	subs	r0, r0, r5
 800105a:	2802      	cmp	r0, #2
 800105c:	d9f6      	bls.n	800104c <HAL_RCC_OscConfig+0x2b4>
 800105e:	e6e2      	b.n	8000e26 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001060:	f7ff fa8c 	bl	800057c <HAL_GetTick>
 8001064:	1bc0      	subs	r0, r0, r7
 8001066:	2802      	cmp	r0, #2
 8001068:	d9d8      	bls.n	800101c <HAL_RCC_OscConfig+0x284>
 800106a:	e6dc      	b.n	8000e26 <HAL_RCC_OscConfig+0x8e>
 800106c:	40023800 	.word	0x40023800
 8001070:	42470000 	.word	0x42470000
 8001074:	42470e80 	.word	0x42470e80
 8001078:	40007000 	.word	0x40007000
 800107c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001080:	f7ff fa7c 	bl	800057c <HAL_GetTick>
 8001084:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001086:	682b      	ldr	r3, [r5, #0]
 8001088:	019b      	lsls	r3, r3, #6
 800108a:	f57f ae9f 	bpl.w	8000dcc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800108e:	f7ff fa75 	bl	800057c <HAL_GetTick>
 8001092:	1b00      	subs	r0, r0, r4
 8001094:	2802      	cmp	r0, #2
 8001096:	d9f6      	bls.n	8001086 <HAL_RCC_OscConfig+0x2ee>
 8001098:	e6c5      	b.n	8000e26 <HAL_RCC_OscConfig+0x8e>
 800109a:	bf00      	nop

0800109c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800109c:	4913      	ldr	r1, [pc, #76]	; (80010ec <HAL_RCC_GetSysClockFreq+0x50>)
{
 800109e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010a0:	688b      	ldr	r3, [r1, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d003      	beq.n	80010b2 <HAL_RCC_GetSysClockFreq+0x16>
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d003      	beq.n	80010b6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010ae:	4810      	ldr	r0, [pc, #64]	; (80010f0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010b0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80010b2:	4810      	ldr	r0, [pc, #64]	; (80010f4 <HAL_RCC_GetSysClockFreq+0x58>)
 80010b4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010b6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010b8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010ba:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010bc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010c0:	bf14      	ite	ne
 80010c2:	480c      	ldrne	r0, [pc, #48]	; (80010f4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010c4:	480a      	ldreq	r0, [pc, #40]	; (80010f0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80010ca:	bf18      	it	ne
 80010cc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010d2:	fba1 0100 	umull	r0, r1, r1, r0
 80010d6:	f7ff f87f 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <HAL_RCC_GetSysClockFreq+0x50>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80010e2:	3301      	adds	r3, #1
 80010e4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80010e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80010ea:	bd08      	pop	{r3, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	00f42400 	.word	0x00f42400
 80010f4:	018cba80 	.word	0x018cba80

080010f8 <HAL_RCC_ClockConfig>:
{
 80010f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010fc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80010fe:	4604      	mov	r4, r0
 8001100:	b910      	cbnz	r0, 8001108 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001102:	2001      	movs	r0, #1
 8001104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001108:	4b44      	ldr	r3, [pc, #272]	; (800121c <HAL_RCC_ClockConfig+0x124>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	f002 020f 	and.w	r2, r2, #15
 8001110:	428a      	cmp	r2, r1
 8001112:	d328      	bcc.n	8001166 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001114:	6821      	ldr	r1, [r4, #0]
 8001116:	078f      	lsls	r7, r1, #30
 8001118:	d42d      	bmi.n	8001176 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111a:	07c8      	lsls	r0, r1, #31
 800111c:	d440      	bmi.n	80011a0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800111e:	4b3f      	ldr	r3, [pc, #252]	; (800121c <HAL_RCC_ClockConfig+0x124>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	f002 020f 	and.w	r2, r2, #15
 8001126:	4295      	cmp	r5, r2
 8001128:	d366      	bcc.n	80011f8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800112a:	6822      	ldr	r2, [r4, #0]
 800112c:	0751      	lsls	r1, r2, #29
 800112e:	d46c      	bmi.n	800120a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001130:	0713      	lsls	r3, r2, #28
 8001132:	d507      	bpl.n	8001144 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001134:	4a3a      	ldr	r2, [pc, #232]	; (8001220 <HAL_RCC_ClockConfig+0x128>)
 8001136:	6921      	ldr	r1, [r4, #16]
 8001138:	6893      	ldr	r3, [r2, #8]
 800113a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800113e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001142:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001144:	f7ff ffaa 	bl	800109c <HAL_RCC_GetSysClockFreq>
 8001148:	4b35      	ldr	r3, [pc, #212]	; (8001220 <HAL_RCC_ClockConfig+0x128>)
 800114a:	4a36      	ldr	r2, [pc, #216]	; (8001224 <HAL_RCC_ClockConfig+0x12c>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001152:	5cd3      	ldrb	r3, [r2, r3]
 8001154:	40d8      	lsrs	r0, r3
 8001156:	4b34      	ldr	r3, [pc, #208]	; (8001228 <HAL_RCC_ClockConfig+0x130>)
 8001158:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff f9c4 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 8001160:	2000      	movs	r0, #0
 8001162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001166:	b2ca      	uxtb	r2, r1
 8001168:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	4299      	cmp	r1, r3
 8001172:	d1c6      	bne.n	8001102 <HAL_RCC_ClockConfig+0xa>
 8001174:	e7ce      	b.n	8001114 <HAL_RCC_ClockConfig+0x1c>
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800117c:	bf1e      	ittt	ne
 800117e:	689a      	ldrne	r2, [r3, #8]
 8001180:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001184:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001186:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001188:	bf42      	ittt	mi
 800118a:	689a      	ldrmi	r2, [r3, #8]
 800118c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001190:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	68a0      	ldr	r0, [r4, #8]
 8001196:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800119a:	4302      	orrs	r2, r0
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	e7bc      	b.n	800111a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a0:	6862      	ldr	r2, [r4, #4]
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <HAL_RCC_ClockConfig+0x128>)
 80011a4:	2a01      	cmp	r2, #1
 80011a6:	d11d      	bne.n	80011e4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	d0a8      	beq.n	8001102 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b0:	4e1b      	ldr	r6, [pc, #108]	; (8001220 <HAL_RCC_ClockConfig+0x128>)
 80011b2:	68b3      	ldr	r3, [r6, #8]
 80011b4:	f023 0303 	bic.w	r3, r3, #3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80011bc:	f7ff f9de 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80011c4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c6:	68b3      	ldr	r3, [r6, #8]
 80011c8:	6862      	ldr	r2, [r4, #4]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011d2:	d0a4      	beq.n	800111e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d4:	f7ff f9d2 	bl	800057c <HAL_GetTick>
 80011d8:	1bc0      	subs	r0, r0, r7
 80011da:	4540      	cmp	r0, r8
 80011dc:	d9f3      	bls.n	80011c6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80011de:	2003      	movs	r0, #3
}
 80011e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011e4:	1e91      	subs	r1, r2, #2
 80011e6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011e8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ea:	d802      	bhi.n	80011f2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011f0:	e7dd      	b.n	80011ae <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f2:	f013 0f02 	tst.w	r3, #2
 80011f6:	e7da      	b.n	80011ae <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f8:	b2ea      	uxtb	r2, r5
 80011fa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	429d      	cmp	r5, r3
 8001204:	f47f af7d 	bne.w	8001102 <HAL_RCC_ClockConfig+0xa>
 8001208:	e78f      	b.n	800112a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800120a:	4905      	ldr	r1, [pc, #20]	; (8001220 <HAL_RCC_ClockConfig+0x128>)
 800120c:	68e0      	ldr	r0, [r4, #12]
 800120e:	688b      	ldr	r3, [r1, #8]
 8001210:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001214:	4303      	orrs	r3, r0
 8001216:	608b      	str	r3, [r1, #8]
 8001218:	e78a      	b.n	8001130 <HAL_RCC_ClockConfig+0x38>
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00
 8001220:	40023800 	.word	0x40023800
 8001224:	08001a50 	.word	0x08001a50
 8001228:	20000008 	.word	0x20000008

0800122c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <HAL_RCC_GetPCLK1Freq+0x14>)
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800123a:	6810      	ldr	r0, [r2, #0]
}
 800123c:	40d8      	lsrs	r0, r3
 800123e:	4770      	bx	lr
 8001240:	40023800 	.word	0x40023800
 8001244:	08001a60 	.word	0x08001a60
 8001248:	20000008 	.word	0x20000008

0800124c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_RCC_GetPCLK2Freq+0x14>)
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001256:	5cd3      	ldrb	r3, [r2, r3]
 8001258:	4a03      	ldr	r2, [pc, #12]	; (8001268 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800125a:	6810      	ldr	r0, [r2, #0]
}
 800125c:	40d8      	lsrs	r0, r3
 800125e:	4770      	bx	lr
 8001260:	40023800 	.word	0x40023800
 8001264:	08001a60 	.word	0x08001a60
 8001268:	20000008 	.word	0x20000008

0800126c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001270:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001272:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001274:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001276:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001278:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800127c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800127e:	6133      	str	r3, [r6, #16]
{
 8001280:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001282:	6883      	ldr	r3, [r0, #8]
 8001284:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001286:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001288:	4303      	orrs	r3, r0
 800128a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800128c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001290:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001292:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001296:	430b      	orrs	r3, r1
 8001298:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800129a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800129c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800129e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80012a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80012a4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012a6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80012aa:	6173      	str	r3, [r6, #20]
 80012ac:	4b7a      	ldr	r3, [pc, #488]	; (8001498 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012ae:	d17c      	bne.n	80013aa <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80012b0:	429e      	cmp	r6, r3
 80012b2:	d003      	beq.n	80012bc <UART_SetConfig+0x50>
 80012b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012b8:	429e      	cmp	r6, r3
 80012ba:	d144      	bne.n	8001346 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80012bc:	f7ff ffc6 	bl	800124c <HAL_RCC_GetPCLK2Freq>
 80012c0:	2519      	movs	r5, #25
 80012c2:	fb05 f300 	mul.w	r3, r5, r0
 80012c6:	6860      	ldr	r0, [r4, #4]
 80012c8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80012cc:	0040      	lsls	r0, r0, #1
 80012ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80012d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80012d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80012da:	f7ff ffb7 	bl	800124c <HAL_RCC_GetPCLK2Freq>
 80012de:	6863      	ldr	r3, [r4, #4]
 80012e0:	4368      	muls	r0, r5
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fbb0 f7f3 	udiv	r7, r0, r3
 80012e8:	f7ff ffb0 	bl	800124c <HAL_RCC_GetPCLK2Freq>
 80012ec:	6863      	ldr	r3, [r4, #4]
 80012ee:	4368      	muls	r0, r5
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f6:	fbb3 f3f9 	udiv	r3, r3, r9
 80012fa:	fb09 7313 	mls	r3, r9, r3, r7
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	3332      	adds	r3, #50	; 0x32
 8001302:	fbb3 f3f9 	udiv	r3, r3, r9
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800130c:	f7ff ff9e 	bl	800124c <HAL_RCC_GetPCLK2Freq>
 8001310:	6862      	ldr	r2, [r4, #4]
 8001312:	4368      	muls	r0, r5
 8001314:	0052      	lsls	r2, r2, #1
 8001316:	fbb0 faf2 	udiv	sl, r0, r2
 800131a:	f7ff ff97 	bl	800124c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800131e:	6863      	ldr	r3, [r4, #4]
 8001320:	4368      	muls	r0, r5
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fbb0 f3f3 	udiv	r3, r0, r3
 8001328:	fbb3 f3f9 	udiv	r3, r3, r9
 800132c:	fb09 a313 	mls	r3, r9, r3, sl
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	3332      	adds	r3, #50	; 0x32
 8001334:	fbb3 f3f9 	udiv	r3, r3, r9
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800133e:	443b      	add	r3, r7
 8001340:	60b3      	str	r3, [r6, #8]
 8001342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001346:	f7ff ff71 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 800134a:	2519      	movs	r5, #25
 800134c:	fb05 f300 	mul.w	r3, r5, r0
 8001350:	6860      	ldr	r0, [r4, #4]
 8001352:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001356:	0040      	lsls	r0, r0, #1
 8001358:	fbb3 f3f0 	udiv	r3, r3, r0
 800135c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001360:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001364:	f7ff ff62 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8001368:	6863      	ldr	r3, [r4, #4]
 800136a:	4368      	muls	r0, r5
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fbb0 f7f3 	udiv	r7, r0, r3
 8001372:	f7ff ff5b 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8001376:	6863      	ldr	r3, [r4, #4]
 8001378:	4368      	muls	r0, r5
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001380:	fbb3 f3f9 	udiv	r3, r3, r9
 8001384:	fb09 7313 	mls	r3, r9, r3, r7
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	3332      	adds	r3, #50	; 0x32
 800138c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001396:	f7ff ff49 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 800139a:	6862      	ldr	r2, [r4, #4]
 800139c:	4368      	muls	r0, r5
 800139e:	0052      	lsls	r2, r2, #1
 80013a0:	fbb0 faf2 	udiv	sl, r0, r2
 80013a4:	f7ff ff42 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 80013a8:	e7b9      	b.n	800131e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80013aa:	429e      	cmp	r6, r3
 80013ac:	d002      	beq.n	80013b4 <UART_SetConfig+0x148>
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <UART_SetConfig+0x230>)
 80013b0:	429e      	cmp	r6, r3
 80013b2:	d140      	bne.n	8001436 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80013b4:	f7ff ff4a 	bl	800124c <HAL_RCC_GetPCLK2Freq>
 80013b8:	6867      	ldr	r7, [r4, #4]
 80013ba:	2519      	movs	r5, #25
 80013bc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80013c0:	fb05 f300 	mul.w	r3, r5, r0
 80013c4:	00bf      	lsls	r7, r7, #2
 80013c6:	fbb3 f3f7 	udiv	r3, r3, r7
 80013ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80013ce:	011f      	lsls	r7, r3, #4
 80013d0:	f7ff ff3c 	bl	800124c <HAL_RCC_GetPCLK2Freq>
 80013d4:	6863      	ldr	r3, [r4, #4]
 80013d6:	4368      	muls	r0, r5
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	fbb0 f8f3 	udiv	r8, r0, r3
 80013de:	f7ff ff35 	bl	800124c <HAL_RCC_GetPCLK2Freq>
 80013e2:	6863      	ldr	r3, [r4, #4]
 80013e4:	4368      	muls	r0, r5
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80013f0:	fb09 8313 	mls	r3, r9, r3, r8
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	3332      	adds	r3, #50	; 0x32
 80013f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80013fc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001400:	f7ff ff24 	bl	800124c <HAL_RCC_GetPCLK2Freq>
 8001404:	6862      	ldr	r2, [r4, #4]
 8001406:	4368      	muls	r0, r5
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	fbb0 faf2 	udiv	sl, r0, r2
 800140e:	f7ff ff1d 	bl	800124c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001412:	6863      	ldr	r3, [r4, #4]
 8001414:	4368      	muls	r0, r5
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	fbb0 f3f3 	udiv	r3, r0, r3
 800141c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001420:	fb09 a313 	mls	r3, r9, r3, sl
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	3332      	adds	r3, #50	; 0x32
 8001428:	fbb3 f3f9 	udiv	r3, r3, r9
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	ea43 0308 	orr.w	r3, r3, r8
 8001434:	e783      	b.n	800133e <UART_SetConfig+0xd2>
 8001436:	f7ff fef9 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 800143a:	6867      	ldr	r7, [r4, #4]
 800143c:	2519      	movs	r5, #25
 800143e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001442:	fb05 f300 	mul.w	r3, r5, r0
 8001446:	00bf      	lsls	r7, r7, #2
 8001448:	fbb3 f3f7 	udiv	r3, r3, r7
 800144c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001450:	011f      	lsls	r7, r3, #4
 8001452:	f7ff feeb 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8001456:	6863      	ldr	r3, [r4, #4]
 8001458:	4368      	muls	r0, r5
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001460:	f7ff fee4 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8001464:	6863      	ldr	r3, [r4, #4]
 8001466:	4368      	muls	r0, r5
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	fbb0 f3f3 	udiv	r3, r0, r3
 800146e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001472:	fb09 8313 	mls	r3, r9, r3, r8
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	3332      	adds	r3, #50	; 0x32
 800147a:	fbb3 f3f9 	udiv	r3, r3, r9
 800147e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001482:	f7ff fed3 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8001486:	6862      	ldr	r2, [r4, #4]
 8001488:	4368      	muls	r0, r5
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	fbb0 faf2 	udiv	sl, r0, r2
 8001490:	f7ff fecc 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8001494:	e7bd      	b.n	8001412 <UART_SetConfig+0x1a6>
 8001496:	bf00      	nop
 8001498:	40011000 	.word	0x40011000
 800149c:	40011400 	.word	0x40011400

080014a0 <HAL_UART_Init>:
{
 80014a0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80014a2:	4604      	mov	r4, r0
 80014a4:	b340      	cbz	r0, 80014f8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80014a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80014aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014ae:	b91b      	cbnz	r3, 80014b8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80014b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80014b4:	f000 fa1a 	bl	80018ec <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80014b8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80014ba:	2324      	movs	r3, #36	; 0x24
 80014bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80014c0:	68d3      	ldr	r3, [r2, #12]
 80014c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014c6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7ff fecf 	bl	800126c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014de:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014e6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014e8:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80014ea:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ec:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80014ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80014f2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80014f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014f8:	2001      	movs	r0, #1
}
 80014fa:	bd10      	pop	{r4, pc}

080014fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014fc:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_GPIO_Init+0x48>)
 8001500:	2200      	movs	r2, #0
 8001502:	9201      	str	r2, [sp, #4]
 8001504:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001506:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800150a:	6319      	str	r1, [r3, #48]	; 0x30
 800150c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800150e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001512:	9101      	str	r1, [sp, #4]
 8001514:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	9202      	str	r2, [sp, #8]
 8001518:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800151a:	f041 0101 	orr.w	r1, r1, #1
 800151e:	6319      	str	r1, [r3, #48]	; 0x30
 8001520:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001522:	f001 0101 	and.w	r1, r1, #1
 8001526:	9102      	str	r1, [sp, #8]
 8001528:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	9203      	str	r2, [sp, #12]
 800152c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152e:	f042 0202 	orr.w	r2, r2, #2
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	9303      	str	r3, [sp, #12]
 800153c:	9b03      	ldr	r3, [sp, #12]

}
 800153e:	b004      	add	sp, #16
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001548:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800154a:	480c      	ldr	r0, [pc, #48]	; (800157c <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_I2C1_Init+0x38>)
 800154e:	f8df e034 	ldr.w	lr, [pc, #52]	; 8001584 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001552:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001556:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800155a:	2300      	movs	r3, #0
 800155c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800155e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001560:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001562:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001564:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001566:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001568:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156a:	f7ff fa23 	bl	80009b4 <HAL_I2C_Init>
 800156e:	b118      	cbz	r0, 8001578 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8001570:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001574:	f000 b950 	b.w	8001818 <Error_Handler>
 8001578:	bd08      	pop	{r3, pc}
 800157a:	bf00      	nop
 800157c:	2000002c 	.word	0x2000002c
 8001580:	40005400 	.word	0x40005400
 8001584:	000186a0 	.word	0x000186a0

08001588 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001588:	b530      	push	{r4, r5, lr}
 800158a:	4604      	mov	r4, r0
 800158c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	2214      	movs	r2, #20
 8001590:	2100      	movs	r1, #0
 8001592:	a803      	add	r0, sp, #12
 8001594:	f000 fa30 	bl	80019f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001598:	6822      	ldr	r2, [r4, #0]
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_I2C_MspInit+0x68>)
 800159c:	429a      	cmp	r2, r3
 800159e:	d124      	bne.n	80015ea <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	4c14      	ldr	r4, [pc, #80]	; (80015f4 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	4815      	ldr	r0, [pc, #84]	; (80015f8 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a4:	2500      	movs	r5, #0
 80015a6:	9501      	str	r5, [sp, #4]
 80015a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	6323      	str	r3, [r4, #48]	; 0x30
 80015b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c0:	2312      	movs	r3, #18
 80015c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ce:	2304      	movs	r3, #4
 80015d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f7ff f849 	bl	8000668 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d6:	9502      	str	r5, [sp, #8]
 80015d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015de:	6423      	str	r3, [r4, #64]	; 0x40
 80015e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e6:	9302      	str	r3, [sp, #8]
 80015e8:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015ea:	b009      	add	sp, #36	; 0x24
 80015ec:	bd30      	pop	{r4, r5, pc}
 80015ee:	bf00      	nop
 80015f0:	40005400 	.word	0x40005400
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020400 	.word	0x40020400

080015fc <LCD_SendInternal>:
 *      Author: shuran
 */
#include "i2c_lcd_1602.h"

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data,
		uint8_t flags) {
 80015fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80015fe:	460e      	mov	r6, r1
 8001600:	4614      	mov	r4, r2
	HAL_StatusTypeDef res;
	for (;;) {
		res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8001602:	4605      	mov	r5, r0
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	2201      	movs	r2, #1
 800160a:	4629      	mov	r1, r5
 800160c:	4814      	ldr	r0, [pc, #80]	; (8001660 <LCD_SendInternal+0x64>)
 800160e:	f7ff fb15 	bl	8000c3c <HAL_I2C_IsDeviceReady>
		if (res == HAL_OK)
 8001612:	2800      	cmp	r0, #0
 8001614:	d1f6      	bne.n	8001604 <LCD_SendInternal+0x8>

	uint8_t up = data & 0xF0;
	uint8_t lo = (data << 4) & 0xF0;

	uint8_t data_arr[4];
	data_arr[0] = up | flags | _backlightval | PIN_EN;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <LCD_SendInternal+0x68>)
	data_arr[1] = up | flags | _backlightval;
	data_arr[2] = lo | flags | _backlightval | PIN_EN;
	data_arr[3] = lo | flags | _backlightval;

	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8001618:	4811      	ldr	r0, [pc, #68]	; (8001660 <LCD_SendInternal+0x64>)
 800161a:	7819      	ldrb	r1, [r3, #0]
	uint8_t up = data & 0xF0;
 800161c:	f026 030f 	bic.w	r3, r6, #15
 8001620:	4321      	orrs	r1, r4
	data_arr[0] = up | flags | _backlightval | PIN_EN;
 8001622:	430b      	orrs	r3, r1
	data_arr[2] = lo | flags | _backlightval | PIN_EN;
 8001624:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8001628:	b2c9      	uxtb	r1, r1
	data_arr[0] = up | flags | _backlightval | PIN_EN;
 800162a:	f043 0204 	orr.w	r2, r3, #4
	data_arr[1] = up | flags | _backlightval;
 800162e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_arr[2] = lo | flags | _backlightval | PIN_EN;
 8001632:	f041 0304 	orr.w	r3, r1, #4
 8001636:	f88d 300e 	strb.w	r3, [sp, #14]
	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
	data_arr[0] = up | flags | _backlightval | PIN_EN;
 800163e:	f88d 200c 	strb.w	r2, [sp, #12]
	data_arr[3] = lo | flags | _backlightval;
 8001642:	f88d 100f 	strb.w	r1, [sp, #15]
	res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr),
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	aa03      	add	r2, sp, #12
 800164a:	2304      	movs	r3, #4
 800164c:	4629      	mov	r1, r5
 800164e:	f7ff fa1f 	bl	8000a90 <HAL_I2C_Master_Transmit>
 8001652:	4604      	mov	r4, r0
	HAL_MAX_DELAY);
	HAL_Delay(LCD_DELAY_MS);
 8001654:	2005      	movs	r0, #5
 8001656:	f7fe ff97 	bl	8000588 <HAL_Delay>
	return res;
}
 800165a:	4620      	mov	r0, r4
 800165c:	b004      	add	sp, #16
 800165e:	bd70      	pop	{r4, r5, r6, pc}
 8001660:	2000002c 	.word	0x2000002c
 8001664:	20000080 	.word	0x20000080

08001668 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
	LCD_SendInternal(lcd_addr, cmd, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	f7ff bfc7 	b.w	80015fc <LCD_SendInternal>

0800166e <LCD_SendData>:
}

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
	LCD_SendInternal(lcd_addr, data, PIN_RS);
 800166e:	2201      	movs	r2, #1
 8001670:	f7ff bfc4 	b.w	80015fc <LCD_SendInternal>

08001674 <LCD_Init>:
}

void LCD_Init(uint8_t lcd_addr) {
 8001674:	b510      	push	{r4, lr}
	_backlightval = BACKLIGHT;
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <LCD_Init+0x2c>)
void LCD_Init(uint8_t lcd_addr) {
 8001678:	4604      	mov	r4, r0
	_backlightval = BACKLIGHT;
 800167a:	2208      	movs	r2, #8
	// 4-bit mode, 2 lines, 5x7 format
	LCD_SendCommand(lcd_addr, 0b00110000);
 800167c:	2130      	movs	r1, #48	; 0x30
	_backlightval = BACKLIGHT;
 800167e:	701a      	strb	r2, [r3, #0]
	LCD_SendCommand(lcd_addr, 0b00110000);
 8001680:	f7ff fff2 	bl	8001668 <LCD_SendCommand>
	// display & cursor home (keep this!)
	LCD_SendCommand(lcd_addr, 0b00000010);
 8001684:	4620      	mov	r0, r4
 8001686:	2102      	movs	r1, #2
 8001688:	f7ff ffee 	bl	8001668 <LCD_SendCommand>
	// display on, right shift, underline off, blink off
	LCD_SendCommand(lcd_addr, 0b00001100);
 800168c:	4620      	mov	r0, r4
 800168e:	210c      	movs	r1, #12
 8001690:	f7ff ffea 	bl	8001668 <LCD_SendCommand>
	// clear display (optional here)
	LCD_SendCommand(lcd_addr, 0b00000001);
 8001694:	4620      	mov	r0, r4
 8001696:	2101      	movs	r1, #1
}
 8001698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_SendCommand(lcd_addr, 0b00000001);
 800169c:	f7ff bfe4 	b.w	8001668 <LCD_SendCommand>
 80016a0:	20000080 	.word	0x20000080

080016a4 <backlight_disable>:

void backlight_disable(){
	_backlightval = NO_BACKLIGHT;
 80016a4:	4b01      	ldr	r3, [pc, #4]	; (80016ac <backlight_disable+0x8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	4770      	bx	lr
 80016ac:	20000080 	.word	0x20000080

080016b0 <backlight_enable>:
}

void backlight_enable(){
	_backlightval = BACKLIGHT;
 80016b0:	4b01      	ldr	r3, [pc, #4]	; (80016b8 <backlight_enable+0x8>)
 80016b2:	2208      	movs	r2, #8
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	4770      	bx	lr
 80016b8:	20000080 	.word	0x20000080

080016bc <LCD_SendString>:

void lcd_clear(uint8_t lcd_addr) {
	LCD_SendCommand(lcd_addr, 0b00000001);
}

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80016bc:	b538      	push	{r3, r4, r5, lr}
 80016be:	4605      	mov	r5, r0
 80016c0:	1e4c      	subs	r4, r1, #1
	while (*str) {
 80016c2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80016c6:	b901      	cbnz	r1, 80016ca <LCD_SendString+0xe>
		LCD_SendData(lcd_addr, (uint8_t) (*str));
		str++;
	}
}
 80016c8:	bd38      	pop	{r3, r4, r5, pc}
		LCD_SendData(lcd_addr, (uint8_t) (*str));
 80016ca:	4628      	mov	r0, r5
 80016cc:	f7ff ffcf 	bl	800166e <LCD_SendData>
 80016d0:	e7f7      	b.n	80016c2 <LCD_SendString+0x6>
	...

080016d4 <init>:

void init() {
 80016d4:	b508      	push	{r3, lr}
	LCD_Init(LCD_ADDR);
 80016d6:	204e      	movs	r0, #78	; 0x4e
 80016d8:	f7ff ffcc 	bl	8001674 <LCD_Init>

	// set address to 0x00
	LCD_SendCommand(LCD_ADDR, 0b10000000);
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	204e      	movs	r0, #78	; 0x4e
 80016e0:	f7ff ffc2 	bl	8001668 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "..screen init...");
 80016e4:	4906      	ldr	r1, [pc, #24]	; (8001700 <init+0x2c>)
 80016e6:	204e      	movs	r0, #78	; 0x4e
 80016e8:	f7ff ffe8 	bl	80016bc <LCD_SendString>

	// set address to 0x40
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 80016ec:	21c0      	movs	r1, #192	; 0xc0
 80016ee:	204e      	movs	r0, #78	; 0x4e
 80016f0:	f7ff ffba 	bl	8001668 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 80016f4:	4903      	ldr	r1, [pc, #12]	; (8001704 <init+0x30>)
 80016f6:	204e      	movs	r0, #78	; 0x4e
}
 80016f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LCD_SendString(LCD_ADDR, "  over I2C bus");
 80016fc:	f7ff bfde 	b.w	80016bc <LCD_SendString>
 8001700:	08001a20 	.word	0x08001a20
 8001704:	08001a31 	.word	0x08001a31

08001708 <lcd_send_string>:

void lcd_send_string(uint8_t lcd_addr, char *str, int line) {
 8001708:	b538      	push	{r3, r4, r5, lr}
 800170a:	4604      	mov	r4, r0
 800170c:	460d      	mov	r5, r1
	if (line == 0) {
 800170e:	b942      	cbnz	r2, 8001722 <lcd_send_string+0x1a>
		LCD_SendCommand(lcd_addr, 0b10000000);
 8001710:	2180      	movs	r1, #128	; 0x80
		LCD_SendString(lcd_addr, str);
	} else {
		LCD_SendCommand(lcd_addr, 0b11000000);
 8001712:	f7ff ffa9 	bl	8001668 <LCD_SendCommand>
		LCD_SendString(lcd_addr, str);
 8001716:	4629      	mov	r1, r5
 8001718:	4620      	mov	r0, r4
	}
}
 800171a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LCD_SendString(lcd_addr, str);
 800171e:	f7ff bfcd 	b.w	80016bc <LCD_SendString>
		LCD_SendCommand(lcd_addr, 0b11000000);
 8001722:	21c0      	movs	r1, #192	; 0xc0
 8001724:	e7f5      	b.n	8001712 <lcd_send_string+0xa>
	...

08001728 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001728:	b530      	push	{r4, r5, lr}
 800172a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800172c:	2230      	movs	r2, #48	; 0x30
 800172e:	2100      	movs	r1, #0
 8001730:	a808      	add	r0, sp, #32
 8001732:	f000 f961 	bl	80019f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001736:	2100      	movs	r1, #0
 8001738:	2214      	movs	r2, #20
 800173a:	a803      	add	r0, sp, #12
 800173c:	f000 f95c 	bl	80019f8 <memset>

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8001740:	2400      	movs	r4, #0
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <SystemClock_Config+0x8c>)
 8001744:	9401      	str	r4, [sp, #4]
 8001746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001748:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	9b01      	ldr	r3, [sp, #4]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <SystemClock_Config+0x90>)
 800175a:	9402      	str	r4, [sp, #8]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	9b02      	ldr	r3, [sp, #8]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800176e:	2301      	movs	r3, #1
 8001770:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001776:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001778:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800177c:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 13;
 800177e:	230d      	movs	r3, #13
 8001780:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001782:	2364      	movs	r3, #100	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001784:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001786:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001788:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800178a:	2304      	movs	r3, #4
 800178c:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800178e:	950e      	str	r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001790:	9512      	str	r5, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001792:	f7ff fb01 	bl	8000d98 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001796:	230f      	movs	r3, #15
 8001798:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800179a:	2103      	movs	r1, #3
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800179c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80017a0:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a2:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a4:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a6:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a8:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80017aa:	f7ff fca5 	bl	80010f8 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 80017ae:	b015      	add	sp, #84	; 0x54
 80017b0:	bd30      	pop	{r4, r5, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40007000 	.word	0x40007000

080017bc <main>:
int main(void) {
 80017bc:	b508      	push	{r3, lr}
	HAL_Init();
 80017be:	f7fe feb7 	bl	8000530 <HAL_Init>
	SystemClock_Config();
 80017c2:	f7ff ffb1 	bl	8001728 <SystemClock_Config>
	MX_GPIO_Init();
 80017c6:	f7ff fe99 	bl	80014fc <MX_GPIO_Init>
	MX_I2C1_Init();
 80017ca:	f7ff febd 	bl	8001548 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80017ce:	f000 f871 	bl	80018b4 <MX_USART2_UART_Init>
	init();
 80017d2:	f7ff ff7f 	bl	80016d4 <init>
		lcd_send_string(LCD_ADDR, " Using 1602 LCD", 0);
 80017d6:	4c0e      	ldr	r4, [pc, #56]	; (8001810 <main+0x54>)
		HAL_Delay(1000);
 80017d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017dc:	f7fe fed4 	bl	8000588 <HAL_Delay>
		backlight_enable();
 80017e0:	f7ff ff66 	bl	80016b0 <backlight_enable>
		lcd_send_string(LCD_ADDR, " Using 1602 LCD", 0);
 80017e4:	4621      	mov	r1, r4
 80017e6:	2200      	movs	r2, #0
 80017e8:	204e      	movs	r0, #78	; 0x4e
 80017ea:	f7ff ff8d 	bl	8001708 <lcd_send_string>
		lcd_send_string(LCD_ADDR, "  over I2C bus", 1);
 80017ee:	2201      	movs	r2, #1
 80017f0:	4908      	ldr	r1, [pc, #32]	; (8001814 <main+0x58>)
 80017f2:	204e      	movs	r0, #78	; 0x4e
 80017f4:	f7ff ff88 	bl	8001708 <lcd_send_string>
		HAL_Delay(1000);
 80017f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017fc:	f7fe fec4 	bl	8000588 <HAL_Delay>
		backlight_disable();
 8001800:	f7ff ff50 	bl	80016a4 <backlight_disable>
		LCD_SendCommand(LCD_ADDR, 0b00000001);
 8001804:	2101      	movs	r1, #1
 8001806:	204e      	movs	r0, #78	; 0x4e
 8001808:	f7ff ff2e 	bl	8001668 <LCD_SendCommand>
 800180c:	e7e4      	b.n	80017d8 <main+0x1c>
 800180e:	bf00      	nop
 8001810:	08001a40 	.word	0x08001a40
 8001814:	08001a31 	.word	0x08001a31

08001818 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001818:	4770      	bx	lr
	...

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_MspInit+0x34>)
 8001820:	2100      	movs	r1, #0
 8001822:	9100      	str	r1, [sp, #0]
 8001824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800182a:	645a      	str	r2, [r3, #68]	; 0x44
 800182c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800182e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001832:	9200      	str	r2, [sp, #0]
 8001834:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	9101      	str	r1, [sp, #4]
 8001838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	b002      	add	sp, #8
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800

08001854 <NMI_Handler>:
 8001854:	4770      	bx	lr

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	e7fe      	b.n	800185a <BusFault_Handler>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler>

0800185e <SVC_Handler>:
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:
 8001860:	4770      	bx	lr

08001862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001862:	4770      	bx	lr

08001864 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f7fe be7e 	b.w	8000564 <HAL_IncTick>

08001868 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001868:	490f      	ldr	r1, [pc, #60]	; (80018a8 <SystemInit+0x40>)
 800186a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800186e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <SystemInit+0x44>)
 8001878:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800187a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001882:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800188a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800188e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001890:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <SystemInit+0x48>)
 8001892:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800189a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800189c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800189e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018a2:	608b      	str	r3, [r1, #8]
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	24003010 	.word	0x24003010

080018b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018b4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80018b6:	480b      	ldr	r0, [pc, #44]	; (80018e4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_USART2_UART_Init+0x34>)
 80018ba:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80018be:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c2:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018c4:	2300      	movs	r3, #0
 80018c6:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c8:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ca:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018cc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d2:	f7ff fde5 	bl	80014a0 <HAL_UART_Init>
 80018d6:	b118      	cbz	r0, 80018e0 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80018d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80018dc:	f7ff bf9c 	b.w	8001818 <Error_Handler>
 80018e0:	bd08      	pop	{r3, pc}
 80018e2:	bf00      	nop
 80018e4:	20000084 	.word	0x20000084
 80018e8:	40004400 	.word	0x40004400

080018ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018ec:	b510      	push	{r4, lr}
 80018ee:	4604      	mov	r4, r0
 80018f0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	2214      	movs	r2, #20
 80018f4:	2100      	movs	r1, #0
 80018f6:	a803      	add	r0, sp, #12
 80018f8:	f000 f87e 	bl	80019f8 <memset>
  if(uartHandle->Instance==USART2)
 80018fc:	6822      	ldr	r2, [r4, #0]
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_UART_MspInit+0x68>)
 8001900:	429a      	cmp	r2, r3
 8001902:	d124      	bne.n	800194e <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001904:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001908:	2100      	movs	r1, #0
 800190a:	9101      	str	r1, [sp, #4]
 800190c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	4812      	ldr	r0, [pc, #72]	; (8001958 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001910:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
 8001916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001918:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800191c:	9201      	str	r2, [sp, #4]
 800191e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	9102      	str	r1, [sp, #8]
 8001922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001924:	f042 0201 	orr.w	r2, r2, #1
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001934:	230c      	movs	r3, #12
 8001936:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193c:	2301      	movs	r3, #1
 800193e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001946:	2307      	movs	r3, #7
 8001948:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f7fe fe8d 	bl	8000668 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800194e:	b008      	add	sp, #32
 8001950:	bd10      	pop	{r4, pc}
 8001952:	bf00      	nop
 8001954:	40004400 	.word	0x40004400
 8001958:	40020000 	.word	0x40020000

0800195c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800195c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001994 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001960:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001962:	e003      	b.n	800196c <LoopCopyDataInit>

08001964 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001966:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001968:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800196a:	3104      	adds	r1, #4

0800196c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800196c:	480b      	ldr	r0, [pc, #44]	; (800199c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001970:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001972:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001974:	d3f6      	bcc.n	8001964 <CopyDataInit>
  ldr  r2, =_sbss
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001978:	e002      	b.n	8001980 <LoopFillZerobss>

0800197a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800197a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800197c:	f842 3b04 	str.w	r3, [r2], #4

08001980 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001982:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001984:	d3f9      	bcc.n	800197a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001986:	f7ff ff6f 	bl	8001868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800198a:	f000 f811 	bl	80019b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198e:	f7ff ff15 	bl	80017bc <main>
  bx  lr    
 8001992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001994:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001998:	08001a78 	.word	0x08001a78
  ldr  r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019a0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80019a4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80019a8:	200000c4 	.word	0x200000c4

080019ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC_IRQHandler>
	...

080019b0 <__libc_init_array>:
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	4e0d      	ldr	r6, [pc, #52]	; (80019e8 <__libc_init_array+0x38>)
 80019b4:	4c0d      	ldr	r4, [pc, #52]	; (80019ec <__libc_init_array+0x3c>)
 80019b6:	1ba4      	subs	r4, r4, r6
 80019b8:	10a4      	asrs	r4, r4, #2
 80019ba:	2500      	movs	r5, #0
 80019bc:	42a5      	cmp	r5, r4
 80019be:	d109      	bne.n	80019d4 <__libc_init_array+0x24>
 80019c0:	4e0b      	ldr	r6, [pc, #44]	; (80019f0 <__libc_init_array+0x40>)
 80019c2:	4c0c      	ldr	r4, [pc, #48]	; (80019f4 <__libc_init_array+0x44>)
 80019c4:	f000 f820 	bl	8001a08 <_init>
 80019c8:	1ba4      	subs	r4, r4, r6
 80019ca:	10a4      	asrs	r4, r4, #2
 80019cc:	2500      	movs	r5, #0
 80019ce:	42a5      	cmp	r5, r4
 80019d0:	d105      	bne.n	80019de <__libc_init_array+0x2e>
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
 80019d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019d8:	4798      	blx	r3
 80019da:	3501      	adds	r5, #1
 80019dc:	e7ee      	b.n	80019bc <__libc_init_array+0xc>
 80019de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019e2:	4798      	blx	r3
 80019e4:	3501      	adds	r5, #1
 80019e6:	e7f2      	b.n	80019ce <__libc_init_array+0x1e>
 80019e8:	08001a70 	.word	0x08001a70
 80019ec:	08001a70 	.word	0x08001a70
 80019f0:	08001a70 	.word	0x08001a70
 80019f4:	08001a74 	.word	0x08001a74

080019f8 <memset>:
 80019f8:	4402      	add	r2, r0
 80019fa:	4603      	mov	r3, r0
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d100      	bne.n	8001a02 <memset+0xa>
 8001a00:	4770      	bx	lr
 8001a02:	f803 1b01 	strb.w	r1, [r3], #1
 8001a06:	e7f9      	b.n	80019fc <memset+0x4>

08001a08 <_init>:
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	bf00      	nop
 8001a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0e:	bc08      	pop	{r3}
 8001a10:	469e      	mov	lr, r3
 8001a12:	4770      	bx	lr

08001a14 <_fini>:
 8001a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a16:	bf00      	nop
 8001a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1a:	bc08      	pop	{r3}
 8001a1c:	469e      	mov	lr, r3
 8001a1e:	4770      	bx	lr
